Over the years, much great software for advanced video encoding has been written, unfortunately most of it for windows only. So linux users, who want to produce high quality encodings have to use a windows installation either natively or in a virtual machine. Both of which needs a windows license and often is disliked by those who never were at or went away from windows.
Thanks to many great coders there is a windows runtime environment called wine, in which the most important windows tools do work at least sufficiently.

I have to admit I'm not that guy on the command line I wish I was. My first attempt to write a script to ease my encoding, well, it was crap.
Thanks to drstrangelove420, who pointed me to avs2yuv, I reconsidered the script, re-wrote it completely and I hope, it is now usable and more of an assistance than a burden.

I have written this script to produce test encodes in a kind of methodical manner. It is boring and sometimes tempting to be done unstructered. As a test encode may take twenty minutes, you may have to operate your pc after every 20 minutes to prompt the next encode.
This script shall provide test encodes to compare parameters, and do some, gradually more complex encoding with crosswise parameters, and in the end encoding the whole movie.

It offers nine options, one prerequesite to another, largely corresponding to the methods recommended in advanced encoding guides:

0 - check, if all necessary programs are installed and show your default settings
1 - de-/ unencrypted VOB|m2ts|remux -> mpeg2|h264 -> mkv,
2 - test for crf integers and fractionals of crf
3 - test for qcomp
4 - test for aq strength and psy-rd
5 - test for psy-trellis
6 - do some more things: chroma-qp-offset
7 - another round of crf
8 - encoding the whole movie

It uses native linux cli tools as far as available (which is not much right now), all the rest is done using windows tools via wine.

It works for standard and high definition sources, getting along with VOB containers as well as m2ts streams and reads matroska containers (remuxes).

The script consists of two parts:
The bash script itself: wine.encode.sh and a configuration file default.cfg in a directory named wine.encode.
You can place the script whereever you want, maybe somewhere in your $PATH.
The config file I suggest to place to
~/.config/wine.encode/default.cfg
but any other place may be suitable. In the latter case, you have to edit the line
CONFIG="{HOME}/.config/wine.encode/default.cfg"
which right now appears twice in the script, at line 74 and 93,approximately.

The config file stores all important parameters, the volatile ones, which change throughout the encoding process as well as the more constant ones, which you do not change without reason. The "more constant ones" are those between double lines of #. If you want to change them, use your editor of choice.

Start the script like this:
$ ./wine.encode.sh
You can check, if all neccessary programs are available and check the default settings for encoding.
Also start the script without any parameters to begin the encoding process from an unencrypted VIDEO_TS directory respectively m2ts file.
During going through option 1, an individual config file will be generated which stores your settings for each movie. The config file will be placed in the default config file's directory and given a file name as your test encode.
With this name as parameter, you go on from option 2 to option 8. Let's say, you encode "The Fabulous Baker Boys". Choose a short name for practical reasons! You give your encoding the name tfbb. From there on, start the script with
$ ./wine.encode.sh tfbb
You want to work on another movie, before the baker boys are finished? No problem, that encoding also gets its individual config file, so your settings don't get confused.

Requirements:

Maybe you prefer not to mix your encoding environment with other installations of wine. If you do not have any wine-installation yet, you may leave the newly installed wine directory in place. If you do have a wine installation already, you may rename it or install your encoding environment someplace else. There is a variable in the default.cfg configuration file  (wine=.wine) which then has to be edited.

Install the linux programs preferably from your distribution:

# apt-get install wine x264 mkvmerge mediainfo exiftool beep

Download eac3to, AvsPmod, avs2yuv, MatroskaSplitter, Avisynth, Avisynth Plugins and FillMargins.

Unzip your eac3to.zip to "Program Files":

$ unzip /path/to/eac3to.zip -d /home/<user>/.wine/drive_c/Program\ Files/eac3to

similar, with AvsPmod:

$ unzip /path/to/AvsPmod_v2.5.1.zip -d /home/<user>/.wine/drive_c/Program\ Files/

and avs2yuv-0.24.zip:

$ unzip /path/to/avs2yuv-0.24.zip -x /home/<user>/.wine/drive_c/Program\ Files/

Unzip your FillMargins.zip to "Program Files":

$ unzip /path/to/FillMargins.zip -d /home/<user>/.wine/drive_c/Program\ Files/FillMargins

Install MatroskaSplitter.exe:

$ wine /path/to/MatroskaSplitter.exe

and follow the instructions. Same same with Avisynth:

$ wine path/to/Avisynth_258.exe

Unrar Avisynth Plugins and copy the content of the plugins directory:

$ unrar x -r /path/to/Avisynth\ Plugins.rar
$ cp -v /path/to/unrar'ed/Avisynth\ Plugins/plugins/* /home/<user>/.wine/drive_c/Program\ Files/AviSynth\ 2.5/plugins/

This script does not need more programs to work. You can install all kind of avisynth filters. There is no guarantee for them to work, though. Generally, many avisynth filters should work, however, I did not do much in the way of verification here.
I tested for
· QTGMC().SelectEven()
· TFM().TDecimate()
· FillMargins

During encoding, the script generates a simple .avs for each testing stage, so you don't have to tamper with avs files to get your comparison screens. Of course, they can be edited by $editor at any time as you like to.

As eac3to in wine does not mux streams into matroska containers, the script kind of walks around and demuxes the source into h264 or mpeg2 streams, which afterwards are muxed into a mkv file, just for traditional reason.

I learned that AvsPmod is not very stable while editing opened avs files. When using the resize calculator, do not click »apply«, do not let the calculator work on your .avs, but set these parameters when the script asks for them.

Limitations:

The script does NOT (yet) do:

decrypt sources
handle demuxed audio files
handle demuxed subtitles
handle chapter files
mux anything together

At the moment, the maximum number of test encodings in one avs file is 102, especially limiting the number of combinations in cross testing aq strength and psy-rd.

Though some parameters can be set permanent, encoding needs a lot of trial and error to find the best possible result. There's lots of interaction. Sorry about that.

The script is work in progress, and I'd very much appreciate any help and criticism.
Some flaky things I did not know how to avoid are noted in the script, these comments start with #TODONOTE. I'd be especially thankful for them to be solved in a clean way.
The "code" right here is more or less for a quick look only, recent versions you will find on github:

https://github.com/derpolsper/wine.encode

I apologize for my poor English, I am obviously not a native speaker and have not spoken or written English in quite a long time.

Credits to uncountable contributors at stackoverflow.com
http://stackoverflow.com/questions/16571739/
http://mywiki.wooledge.org/BashFAQ/073
http://en.wikibooks.org/wiki/Eac3to/How_to_Use
http://avisynth.nl
http://mewiki.project357.com/wiki/X264_Settings
and many people at ptp.me

